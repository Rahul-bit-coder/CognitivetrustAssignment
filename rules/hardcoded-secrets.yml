rules:
  - id: hardcoded-secrets
    message: "Hardcoded secret detected. Use environment variables instead."
    severity: WARNING
    languages: [javascript, typescript]
    pattern: |
      const $VAR = "$SECRET"

  - id: missing-authorization
    message: "Express route missing authorization middleware (e.g., checkRole)."
    severity: ERROR
    languages: [javascript, typescript]
    pattern: |
      app.$METHOD("$ROUTE", (req, res) => {
        ...
      })

  - id: outdated-dependencies
    message: "Check dependency version in package.json — may be outdated/vulnerable."
    severity: WARNING
    languages: [json]
    pattern: |
      "$DEP": "$VERSION"

  - id: dangerous-eval
    message: "Avoid using eval(), it can lead to code injection."
    severity: ERROR
    languages: [javascript, typescript]
    pattern: "eval($ARG)"  # <- quote single-line patterns with parentheses

  - id: nosql-injection
    message: "Using $where in MongoDB queries can allow injection attacks."
    severity: ERROR
    languages: [javascript, typescript]
    pattern: "db.$COL.find({ $where: $COND })" # <- quote entire pattern

  - id: sql-injection
    message: "Possible SQL Injection — use parameterized queries."
    severity: ERROR
    languages: [javascript, typescript]
    pattern: |
      db.query("SELECT * FROM users WHERE id=" + $VAR)

  - id: insecure-http
    message: "Use HTTPS instead of HTTP for secure communication."
    severity: WARNING
    languages: [javascript, typescript]
    pattern: |
      http.get($URL, $HANDLER)

  